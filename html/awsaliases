# This file contains a few shell aliases and functions
# that should it easier for you to work with AWS EC2
# within the context of the class CS615 System
# Administration.
#
# Author: Jan Schaumann <jschauma@netmeister.org>
#         @jschauma
#
# See https://stevens.netmeister.org/615/ for more
# information.
#
# This file is in the public domain.

###
# Generic handling of instances first
###

# First, I'm too lazy to always type
# 'aws ec2 run-instances ...'
#
# In addition, I use a separate SSH key for AWS
# resources associated with Stevens.  If you have only
# a default SSH key, then you do not need to include
# that option here.
alias instance='aws ec2 run-instances --key-name stevens --image-id'

# Next, I want my instances to be IPv4/IPv6 dual stack
# enabled.  AWS does not offer this by default, but if
# you configure an appropriate subnet and security
# group as described in
# https://www.netmeister.org/blog/ec2-ipv6.html, then
# you can grab the right resources to specify.
#
# We're using a function instead of an alias here
# because we are passing arguments.
startInstance() {
	local ami=${1}
	local itype=${2:-"t3.micro"}
	
	subnet=$(aws ec2 describe-subnets | jq -r '.Subnets[] | select( .Tags[]? | select(.Value == "dualstack")).SubnetId')
	sg=$(aws ec2 describe-security-groups | jq -r '.SecurityGroups [] | select( .GroupName == "dualstack").GroupId')
	instance ${ami}				\
		--instance-type ${itype}	\
		--subnet-id "${subnet}"		\
		--security-group-ids "${sg}" |	\
		jq -r '.Instances[].InstanceId'
}

# Often I have an instance-id, but want to know what
# the hostname associated with it is.  Specifically,
# after we start an instance, we don't immedately get
# the hostname back, so use the 'iname' function
# to get it:
iname() {
	aws ec2 describe-instances --instance-ids $@ | \
		jq -r ".Reservations[].Instances[].PublicDnsName"
}

# After we start an instance, we have to wait for it
# to come up.  Note: this uses the 'iname' function
# above to report the hostname when we think it's up.
ec2wait() {
	aws ec2 wait instance-running --instance-ids $@
	# "running" does not mean SSH is up, so give it a bit more time
	sleep 60
	echo "Instance $@ should now be up and running: "
	iname $@
}

# Use this to see which instances you currently
# have, regardless of their state.
alias instances='aws ec2 describe-instances | jq -r ".Reservations[].Instances[].InstanceId"'

# Same thing, but printing the hostnames instead:
alias inames='aws ec2 describe-instances | jq -r ".Reservations[].Instances[].PublicDnsName" | grep .'

# ...but often we only care about which instances are
# currently running:
alias running='aws ec2 describe-instances --query Reservations[*].Instances[*].[InstanceId] --filters Name=instance-state-name,Values=running | jq -r ".[] | .[] | .[]"'

# Same thing, but printing hostnames isntead:
alias running-names='aws ec2 describe-instances --query Reservations[*].Instances[*].[PublicDnsName] --filter Name=instance-state-name,Values=running | jq -r ".[] | .[] | .[]"'

# To get a listing of hostnames with instance-ids:
alias instance-id-and-names='aws ec2 describe-instances --output json | jq -r ".Reservations[].Instances[] | \"\(.PublicDnsName) \(.InstanceId)\""'

# Analogous to 'instance':
alias term-instance='aws ec2 terminate-instances --instance-ids'

# When you want to kill all instances instead of going
# one-by-one.  We don't pipe into 'term-instance'
# because that may not be defined when xargs runs.
alias kill-all-instances='instances | xargs aws ec2 terminate-instances --instance-ids'

# To get console output:
alias console='aws ec2 get-console-output --output text --instance-id'

###
# Generic handling of volumes next:
###

# Create a new volume of size 1GB in us-east-1a unless
# specified otherwise, e.g., "newVolume 3 us-west-1"
newVolume() {
	aws ec2 create-volume --size "${1:-1}" --availability-zone "${2:-us-east-1a}" | \
		jq -r ".VolumeId"
}

# We often attach just one volume to a given instance,
# so let's have a default function to save ourselves
# some typing.
attachVolume() {
	aws ec2 attach-volume --volume-id "${1}" --instance-id "${2}" --device "${3:-/dev/sdf}"
}

# Same for detachingk, but we don't need to know the
# instance-id:
detachVolume() {
	local instance="$(aws ec2 describe-volumes --volume-id "${1}" | \
				jq -r '.Volumes[].Attachments[].InstanceId')"
	if [ -z "${instance}" ]; then
		echo "Volume ${1} not attached to any instance?" >&2
		return
	fi
	aws ec2 detach-volume --volume-id "${1}" --instance-id "${instance}" 
}

# Like 'instances', but for EBS volumes:
alias volumes='aws ec2 describe-volumes | jq -r ".Volumes[].VolumeId"'

# Like 'term-instance', but for a single EBS volume:
alias del-volume='aws ec2 delete-volume --volume-id'

# Like 'killallInstances', but for EBS volumes:
alias kill-all-volumes='volumes | xargs -n 1 aws ec2 delete-volume --volume-id'

# A simple function to determine your current AWS bill
# for the calendar month.
#
# You need read access to the 'Cost Explorer Service';
# create an IAM policy that grants permissions to
# 'Read' and 'List' under "ce:".  (This may require
# additional "Anomaly" resources.)
awsCurrentBill() {
	local readonly ym=$(date +%Y-%m)
	local start end lday
	local num

	if [ ! -r ~/.aws/config ]; then
		return
	fi

	start="${ym}-01"

	lday=31
	case "${ym##*-}" in
	02)
		# screw leap years
		lday=28
		;;
	0[469]|11)
		lday=30
		;;
	esac
	end="${ym}-${lday}"

	num=$(aws ce get-cost-and-usage					\
		--output json						\
		--time-period Start=${start},End=${end}			\
		--granularity MONTHLY					\
		--metrics UnblendedCost					\
		--query 'ResultsByTime[*].Total.[UnblendedCost]' |	\
		jq '.[][0].Amount  | tonumber*100 | round/100')

	if [ -z "${num}" ]; then
		return
	fi

	echo "AWS Billing Period ${start} - ${end}: \$${num}"
}

###
# Specific instances
###

# I usually have aliases for the latest stable version
# of some common OS.  These generally change every few
# months when new releases are made available.

# https://wiki.debian.org/Cloud/AmazonEC2Image/Buster
# Log in as "admin".
alias start-debian='startInstance ami-031283ff8a43b021c'

# https://omniosce.org/setup/aws
# needs t3.micro; log in as "omnios"
alias start-omnios='startInstance ami-0669dd7b1ff900fcc'

# https://alt.fedoraproject.org/cloud/
# Log in as "fedora".
alias start-fedora='startInstance ami-08b4ee602f76bff79'

# https://cloud-images.ubuntu.com/locator/ec2/
# Log in as "ubuntu". 
alias start-ubuntu='startInstance ami-0b0ea68c435eb488d'

# https://www.freebsd.org/releases/13.1R/announce/
# Log in as "ec2-user".
alias start-freebsd='startInstance ami-0cf377776fddcf8ba'

# https://mail-index.netbsd.org/netbsd-users/2021/01/22/msg026460.html
# https://stevens.netmeister.org/615/netbsd-amis.html
# Log in as "root":
alias start-netbsd='startInstance ami-08b87fed21cce91cb t4g.nano'
alias start-netbsd-arm='start-netbsd'
# Log in as "ec2-user":
alias start-netbsd-amd64='startInstance ami-05ffda7ac6da57de1'
